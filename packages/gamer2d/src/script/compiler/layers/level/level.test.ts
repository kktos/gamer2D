import { describe, expect, it } from "vitest";
import { ArgColor } from "../../../../types/value.types";
import { compileScript } from "../../compiler";

describe("TextSpriteProps", () => {
	it("should deal with array of traits", () => {
		const script = `
		level "intro" {
			level  {

				settings {
					big = "level1-L"
					small = "level1-S"
					colorLight = #730000
					colorDark = #8C0042
					fontColor = #FFA4FF
					template = [
						"[*-------------------------------]*",
						"*[...............................**",
						"[[...............................]*",
						"*[...............................**",
						"[[...............................]*",
						"*[...............................**",
						"[[...............................]*",
						"*[...............................**",
						"[[...............................]*",
						"*[...............................**",
						"[[...............................]*",
						"*[...............................**",
						"[[--...---------------------...--]*",
						"*[...............................**",
						"[[...............................]*",
						"*[...............................**",
						"[[--...---------------------...--]*",
						"*[...............................**",
						"[[...............................]*",
						"*[...............................**",
						"[[--...---------------------...--]*",
						"*[...............................**",
						"[[...............................]*",
						"*[...............................**",
						"[[...............................]*",
						"*[_______________________________**"
					]
				}

			}
		}
		`;
		const result = compileScript(script);
		expect(result).toBeDefined();

		const levelLayer = result.layers.find((layer) => layer.type === "level");
		expect(levelLayer).toBeDefined();

		expect(levelLayer).toEqual({
			type: "level",
			settings: {
				big: "level1-L",
				small: "level1-S",
				colorLight: new ArgColor("#730000"),
				colorDark: new ArgColor("#8C0042"),
				fontColor: new ArgColor("#FFA4FF"),
				template: [
					"[*-------------------------------]*",
					"*[...............................**",
					"[[...............................]*",
					"*[...............................**",
					"[[...............................]*",
					"*[...............................**",
					"[[...............................]*",
					"*[...............................**",
					"[[...............................]*",
					"*[...............................**",
					"[[...............................]*",
					"*[...............................**",
					"[[--...---------------------...--]*",
					"*[...............................**",
					"[[...............................]*",
					"*[...............................**",
					"[[--...---------------------...--]*",
					"*[...............................**",
					"[[...............................]*",
					"*[...............................**",
					"[[--...---------------------...--]*",
					"*[...............................**",
					"[[...............................]*",
					"*[...............................**",
					"[[...............................]*",
					"*[_______________________________**",
				],
			},
		});
	});
});
